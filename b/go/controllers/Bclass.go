// generated by genController.go
package controllers

import (
	"net/http"

	"github.com/thomaspeugeot/sandbox01/b/go/models"
	"github.com/thomaspeugeot/sandbox01/b/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// BclassSingloton is the type of the singloton of the controllers package
// this singloton allows for the attachment of callbacks to controllers function
type BclassSingloton struct {
	Callback BclassCallbackInterface
}

// BclassCallbackInterface is the interface that must be supported 
// by the Struct that is attached to the singloton
type BclassCallbackInterface interface {
	PostBclass(bclass *models.Bclass)
}

// BclassSinglotonID is the singloton variable
var BclassSinglotonID BclassSingloton

// An BclassID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getBclass updateBclass deleteBclass
type BclassID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// BclassInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postBclass updateBclass
type BclassInput struct {
	// The Bclass to submit or modify
	// in: body
	Bclass *orm.BclassAPI
}

// GetBclasss
//
// swagger:route GET /bclasss bclasss getBclasss
// 
// Get all bclasss
//
// Responses:
//    default: genericError
//        200: bclassDBsResponse
func GetBclasss(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var bclasss []orm.BclassDB
	query := db.Find(&bclasss)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	c.JSON(http.StatusOK, bclasss)
}

// PostBclass
//
// swagger:route POST /bclasss bclasss postBclass
// 
// Creates a bclass
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: bclassDBResponse
func PostBclass(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.BclassAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create bclass
	bclassDB := orm.BclassDB{}
	bclassDB.BclassAPI = input

	query := db.Create(&bclassDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	if BclassSinglotonID.Callback != nil {
		BclassSinglotonID.Callback.PostBclass(&(bclassDB.Bclass))
	}

	c.JSON(http.StatusOK, bclassDB)
}

// GetBclass
//
// swagger:route GET /bclasss/{ID} bclasss getBclass
//
// Gets the details for a bclass.
//
// Responses:
//    default: genericError
//        200: bclassDBResponse
func GetBclass(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get bclass in DB
	var bclass orm.BclassDB
	if err := db.First(&bclass, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	c.JSON(http.StatusOK, bclass)
}

// UpdateBclass
// 
// swagger:route PATCH /bclasss/{ID} bclasss updateBclass
//
// Update a bclass
//
// Responses:
//    default: genericError
//        200: bclassDBResponse
func UpdateBclass(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var bclassDB orm.BclassDB

	// fetch the bclass
	query := db.First(&bclassDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.BclassAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update 
	query = db.Model(&bclassDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}	

	// return status OK with the marshalling of the the bclassDB
	c.JSON(http.StatusOK, bclassDB)
}

// DeleteBclass
//
// swagger:route DELETE /bclasss/{ID} bclasss deleteBclass
//
// Delete a bclass
//
// Responses:
//    default: genericError
func DeleteBclass(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var bclassDB orm.BclassDB
	if err := db.First(&bclassDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&bclassDB)

	c.JSON(http.StatusOK, gin.H{"data": true})
}



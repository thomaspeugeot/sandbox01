// generated by genGOAllModelStruct.go
package models



// CreateORMBclass enables dynamic registration of a Bclass instance
func CreateORMBclass(Bclass *Bclass) {
	AllModelStore.Bclasss = append(AllModelStore.Bclasss, Bclass)
	if AllModelStore.AllModelsStructCreateCallback != nil {
		AllModelStore.AllModelsStructCreateCallback.CreateORMBclass(Bclass)
	}
}


// DeleteORMBclass enables dynamic registration of a Bclass instance
func DeleteORMBclass(Bclass *Bclass) {
	for index, _Bclass := range AllModelStore.Bclasss {
		if _Bclass == Bclass {
			AllModelStore.Bclasss[index] = AllModelStore.Bclasss[len(AllModelStore.Bclasss)-1]
			AllModelStore.Bclasss = AllModelStore.Bclasss[:len(AllModelStore.Bclasss)-1]
		}
	}
	if AllModelStore.AllModelsStructDeleteCallback != nil {
		AllModelStore.AllModelsStructDeleteCallback.DeleteORMBclass(Bclass)
	}
}

// swagger:ignore
type AllModelsStructCreateInterface interface {
	CreateORMBclass(Bclass *Bclass)
}
	
type AllModelsStructDeleteInterface interface {
	DeleteORMBclass(Bclass *Bclass)
}
		
// swagger:ignore
type AllModelStoreStruct struct {
	Bclasss  []*Bclass
	AllModelsStructCreateCallback AllModelsStructCreateInterface
	AllModelsStructDeleteCallback AllModelsStructDeleteInterface
}

// swagger:ignore
var AllModelStore AllModelStoreStruct = AllModelStoreStruct{
	Bclasss:	make([]*Bclass, 0),
}

func (allModelStoreStruct * AllModelStoreStruct) Reset() {
	allModelStoreStruct.Bclasss =	make([]*Bclass, 0)
}

func (allModelStoreStruct * AllModelStoreStruct) Nil() {
	allModelStoreStruct.Bclasss = nil
}

// generated by genNgTable.go
import { Component, OnInit, OnChanges, Input, Output, EventEmitter } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { MatButton } from '@angular/material/button'

import { Router, RouterState } from '@angular/router';
import { BclassDB } from '../bclass-db'
import { BclassService } from '../bclass.service'


// generated table component
@Component({
  selector: 'app-bclasss-table',
  templateUrl: './bclasss-table.component.html',
  styleUrls: ['./bclasss-table.component.css']
})
export class BclasssTableComponent implements OnInit {

  // the data source for the table
  bclasss: BclassDB[];

  @Input() ID : number; // ID of the caller when component called from struct in reverse relation
  @Input() struct : string; // struct with pointer to Bclass
  @Input() field : string; // field to display

  displayedColumns: string[] = ['ID', 'Floatfield', 'Namefield', 'Edit', 'Delete'];

  constructor(
    private bclassService: BclassService,

    private router: Router,
  ) {
    // observable for changes in structs
    this.bclassService.BclassServiceChanged.subscribe(
      message => {
        if (message == "post" || message == "update" || message == "delete") {
          this.getBclasss()
        }
      }
    )
  }

  ngOnInit(): void {
    this.getBclasss()
  }

  getBclasss(): void {
    if (this.ID == null) {
      this.bclassService.getBclasss().subscribe(
        Bclasss => {
          this.bclasss = Bclasss;
        }
      )
    }
  
  }

  // newBclass initiate a new bclass
  // create a new Bclass objet
  newBclass() {
  }

  deleteBclass(bclassID: number, bclass: BclassDB) {
    // la liste des bclasss est amputée du bclass avant le delete afin
    // de mettre à jour l'IHM
    this.bclasss = this.bclasss.filter(h => h !== bclass);

    this.bclassService.deleteBclass(bclassID).subscribe();
  }

  editBclass(bclassID: number, bclass: BclassDB) {

  }

  // display bclass in router
  displayBclassInRouter(bclassID: number) {
    this.router.navigate( ["bclass-display", bclassID])
  }

  // set editor outlet
  setEditorRouterOutlet(bclassID: number) {
    this.router.navigate([{
      outlets: {
        editor: ["bclass-detail", bclassID]
      }
    }]);
  }

  // set presentation outlet
  setPresentationRouterOutlet(bclassID: number) {
    this.router.navigate([{
      outlets: {
        presentation: ["bclass-presentation", bclassID]
      }
    }]);
  }
}

// generated by genNgTable.go
import { Component, OnInit, OnChanges, Input, Output, EventEmitter } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { MatButton } from '@angular/material/button'

import { Router, RouterState } from '@angular/router';
import { AclassDB } from '../aclass-db'
import { AclassService } from '../aclass.service'


// generated table component
@Component({
  selector: 'app-aclasss-table',
  templateUrl: './aclasss-table.component.html',
  styleUrls: ['./aclasss-table.component.css']
})
export class AclasssTableComponent implements OnInit {

  // the data source for the table
  aclasss: AclassDB[];

  @Input() ID : number; // ID of the caller when component called from struct in reverse relation
  @Input() struct : string; // struct with pointer to Aclass
  @Input() field : string; // field to display

  displayedColumns: string[] = ['ID', 'Floatfield', 'Namefield', 'Edit', 'Delete'];

  constructor(
    private aclassService: AclassService,

    private router: Router,
  ) {
    // observable for changes in structs
    this.aclassService.AclassServiceChanged.subscribe(
      message => {
        if (message == "post" || message == "update" || message == "delete") {
          this.getAclasss()
        }
      }
    )
  }

  ngOnInit(): void {
    this.getAclasss()
  }

  getAclasss(): void {
    if (this.ID == null) {
      this.aclassService.getAclasss().subscribe(
        Aclasss => {
          this.aclasss = Aclasss;
        }
      )
    }
  
  }

  // newAclass initiate a new aclass
  // create a new Aclass objet
  newAclass() {
  }

  deleteAclass(aclassID: number, aclass: AclassDB) {
    // la liste des aclasss est amputée du aclass avant le delete afin
    // de mettre à jour l'IHM
    this.aclasss = this.aclasss.filter(h => h !== aclass);

    this.aclassService.deleteAclass(aclassID).subscribe();
  }

  editAclass(aclassID: number, aclass: AclassDB) {

  }

  // display aclass in router
  displayAclassInRouter(aclassID: number) {
    this.router.navigate( ["aclass-display", aclassID])
  }

  // set editor outlet
  setEditorRouterOutlet(aclassID: number) {
    this.router.navigate([{
      outlets: {
        editor: ["aclass-detail", aclassID]
      }
    }]);
  }

  // set presentation outlet
  setPresentationRouterOutlet(aclassID: number) {
    this.router.navigate([{
      outlets: {
        presentation: ["aclass-presentation", aclassID]
      }
    }]);
  }
}

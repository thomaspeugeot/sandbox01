// generated by genNgTable.go
import { Component, OnInit, OnChanges, Input, Output, EventEmitter } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { MatButton } from '@angular/material/button'

import { Router, RouterState } from '@angular/router';
import { ADB } from '../a-db'
import { AService } from '../a.service'


// generated table component
@Component({
  selector: 'app-as-table',
  templateUrl: './as-table.component.html',
  styleUrls: ['./as-table.component.css']
})
export class AsTableComponent implements OnInit {

  // the data source for the table
  as: ADB[];

  @Input() ID : number; // ID of the caller when component called from struct in reverse relation
  @Input() struct : string; // struct with pointer to A
  @Input() field : string; // field to display

  displayedColumns: string[] = ['ID', 'Floatfield', 'Namefield', 'Edit', 'Delete'];

  constructor(
    private aService: AService,

    private router: Router,
  ) {
    // observable for changes in structs
    this.aService.AServiceChanged.subscribe(
      message => {
        if (message == "post" || message == "update" || message == "delete") {
          this.getAs()
        }
      }
    )
  }

  ngOnInit(): void {
    this.getAs()
  }

  getAs(): void {
    if (this.ID == null) {
      this.aService.getAs().subscribe(
        As => {
          this.as = As;
        }
      )
    }
  
  }

  // newA initiate a new a
  // create a new A objet
  newA() {
  }

  deleteA(aID: number, a: ADB) {
    // la liste des as est amputée du a avant le delete afin
    // de mettre à jour l'IHM
    this.as = this.as.filter(h => h !== a);

    this.aService.deleteA(aID).subscribe();
  }

  editA(aID: number, a: ADB) {

  }

  // display a in router
  displayAInRouter(aID: number) {
    this.router.navigate( ["a-display", aID])
  }

  // set editor outlet
  setEditorRouterOutlet(aID: number) {
    this.router.navigate([{
      outlets: {
        editor: ["a-detail", aID]
      }
    }]);
  }

  // set presentation outlet
  setPresentationRouterOutlet(aID: number) {
    this.router.navigate([{
      outlets: {
        presentation: ["a-presentation", aID]
      }
    }]);
  }
}

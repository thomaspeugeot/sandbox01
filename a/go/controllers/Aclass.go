// generated by genController.go
package controllers

import (
	"net/http"

	"github.com/thomaspeugeot/sandbox01/a/go/models"
	"github.com/thomaspeugeot/sandbox01/a/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// AclassSingloton is the type of the singloton of the controllers package
// this singloton allows for the attachment of callbacks to controllers function
type AclassSingloton struct {
	Callback AclassCallbackInterface
}

// AclassCallbackInterface is the interface that must be supported 
// by the Struct that is attached to the singloton
type AclassCallbackInterface interface {
	PostAclass(aclass *models.Aclass)
}

// AclassSinglotonID is the singloton variable
var AclassSinglotonID AclassSingloton

// An AclassID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getAclass updateAclass deleteAclass
type AclassID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// AclassInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postAclass updateAclass
type AclassInput struct {
	// The Aclass to submit or modify
	// in: body
	Aclass *orm.AclassAPI
}

// GetAclasss
//
// swagger:route GET /aclasss aclasss getAclasss
// 
// Get all aclasss
//
// Responses:
//    default: genericError
//        200: aclassDBsResponse
func GetAclasss(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var aclasss []orm.AclassDB
	query := db.Find(&aclasss)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	c.JSON(http.StatusOK, aclasss)
}

// PostAclass
//
// swagger:route POST /aclasss aclasss postAclass
// 
// Creates a aclass
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: aclassDBResponse
func PostAclass(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.AclassAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create aclass
	aclassDB := orm.AclassDB{}
	aclassDB.AclassAPI = input

	query := db.Create(&aclassDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	if AclassSinglotonID.Callback != nil {
		AclassSinglotonID.Callback.PostAclass(&(aclassDB.Aclass))
	}

	c.JSON(http.StatusOK, aclassDB)
}

// GetAclass
//
// swagger:route GET /aclasss/{ID} aclasss getAclass
//
// Gets the details for a aclass.
//
// Responses:
//    default: genericError
//        200: aclassDBResponse
func GetAclass(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get aclass in DB
	var aclass orm.AclassDB
	if err := db.First(&aclass, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	c.JSON(http.StatusOK, aclass)
}

// UpdateAclass
// 
// swagger:route PATCH /aclasss/{ID} aclasss updateAclass
//
// Update a aclass
//
// Responses:
//    default: genericError
//        200: aclassDBResponse
func UpdateAclass(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var aclassDB orm.AclassDB

	// fetch the aclass
	query := db.First(&aclassDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.AclassAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update 
	query = db.Model(&aclassDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}	

	// return status OK with the marshalling of the the aclassDB
	c.JSON(http.StatusOK, aclassDB)
}

// DeleteAclass
//
// swagger:route DELETE /aclasss/{ID} aclasss deleteAclass
//
// Delete a aclass
//
// Responses:
//    default: genericError
func DeleteAclass(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var aclassDB orm.AclassDB
	if err := db.First(&aclassDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&aclassDB)

	c.JSON(http.StatusOK, gin.H{"data": true})
}



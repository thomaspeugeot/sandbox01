// generated by genGOAllModelStruct.go
package models



// CreateORMAclass enables dynamic registration of a Aclass instance
func CreateORMAclass(Aclass *Aclass) {
	AllModelStore.Aclasss = append(AllModelStore.Aclasss, Aclass)
	if AllModelStore.AllModelsStructCreateCallback != nil {
		AllModelStore.AllModelsStructCreateCallback.CreateORMAclass(Aclass)
	}
}


// DeleteORMAclass enables dynamic registration of a Aclass instance
func DeleteORMAclass(Aclass *Aclass) {
	for index, _Aclass := range AllModelStore.Aclasss {
		if _Aclass == Aclass {
			AllModelStore.Aclasss[index] = AllModelStore.Aclasss[len(AllModelStore.Aclasss)-1]
			AllModelStore.Aclasss = AllModelStore.Aclasss[:len(AllModelStore.Aclasss)-1]
		}
	}
	if AllModelStore.AllModelsStructDeleteCallback != nil {
		AllModelStore.AllModelsStructDeleteCallback.DeleteORMAclass(Aclass)
	}
}

// swagger:ignore
type AllModelsStructCreateInterface interface {
	CreateORMAclass(Aclass *Aclass)
}
	
type AllModelsStructDeleteInterface interface {
	DeleteORMAclass(Aclass *Aclass)
}
		
// swagger:ignore
type AllModelStoreStruct struct {
	Aclasss  []*Aclass
	AllModelsStructCreateCallback AllModelsStructCreateInterface
	AllModelsStructDeleteCallback AllModelsStructDeleteInterface
}

// swagger:ignore
var AllModelStore AllModelStoreStruct = AllModelStoreStruct{
	Aclasss:	make([]*Aclass, 0),
}

func (allModelStoreStruct * AllModelStoreStruct) Reset() {
	allModelStoreStruct.Aclasss =	make([]*Aclass, 0)
}

func (allModelStoreStruct * AllModelStoreStruct) Nil() {
	allModelStoreStruct.Aclasss = nil
}
